import java.lang.*;
class DoublyLinkedList{
    class Node{
        int data;
        Node next;
        Node prev;
        Node(int data)
        {
            this.data=data;
            prev=null;
            next=null;
        }
    }
    Node head=null,tail=null;
    public void Insertatend(int data)
    {
        Node newNode = new Node(data);
        if(head==null && tail==null)
        {
            head=newNode;
            tail=newNode;
        }
        else{
            tail.next=newNode;
            newNode.prev=tail;
            tail=tail.next;
        }
        
    }
    public void printalltheNodes(){
        Node temp =head;
        while(temp!=null){
            System.out.print(temp.data+ " ");
            temp=temp.next;
        }
    }
    public static void main(String args[]){
        DoublyLinkedList list= new DoublyLinkedList();
        list.Insertatend(100);
        list.Insertatend(200);
        list.Insertatend(300);
        
        list.printalltheNodes();
    }
}
import java.util.*;
class Doubly{
    class Node{
        int data;
        Node prev;
        Node next;
        Node(int data){
            this.data=data;
            prev=NULL;
            next=NULL;
        }
    }
    Node head=NULL,tail=NULL;
    public void insertatpos(int data){
        Node newNode= new Node(data);
        System.out.print("Enter the position to insert the node: ");
        Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        Node temp=head;
        int count=0;
        while(temp.next!=NULL)
        {
            count++;
            temp=temp.next;
        }
        if(count==0)
        {
            head=newNode;
            tail=newNode;
        }
        else
        {
            if(n==1)
            {
                head.prev=newNode;
                newNode.next=head;
                head=newNode;
            }
            else if(n>count && n!=1)
            {
                tail.next=newNode;
                newNode.prev=tail;
                tail=tail.next;
            }
            else
            {
                Node temp1,temp2;
                temp1=head;
                temp2=temp1;
                for(int i=1;i<n;i++)
                {
                    temp1=temp2;
                    temp1=temp1.next;
                }
                newNode.prev=
            }
        }
        
    }
}
